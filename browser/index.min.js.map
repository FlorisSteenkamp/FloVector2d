{"version":3,"sources":["index.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","FloVector2d","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","_dereq_","dot","b","cross","ccw","p1","p2","p3","delta","undefined","DELTA","res","Math","abs","segSegIntersection","ab","cd","_ab","_slicedToArray","_cd","c","d","denom","rNumer","sNumer","doesSegSegIntersect","squaredDistanceBetween","x","y","scale","p","factor","reverse","toUnitVector","scaleFactor","toLength","len","fromTo","interpolate","mean","ps","distanceBetween","sqrt","lengthSquared","v","manhattanDistanceBetween","manhattanLength","distanceBetweenPointAndLine","_p","x0","y0","_l","_l$","x1","y1","_l$2","x2","y2","squaredDistanceBetweenPointAndLineSegment","w","l2","max","min","circumCenter","triangle","Sx","det3","Sy","inCenter","l1","l3","lengthSum","centroid","polygon","A","p0","_p2","C","_i","_p3","_p4","z","translate","rotate","sinθ","cosθ","rotateByθ","equal","reverseRotate","rotate90Degrees","rotateNeg90Degrees","transform","getClosestTo","cp","bestd","Number","POSITIVE_INFINITY","p_","translateThenRotatePs","map","rotateThenTranslatePs","sliceIterator","arr","_arr","_n","_d","_e","_s","Symbol","iterator","next","done","push","value","err","Array","isArray","Object","TypeError","rotatePs","f2","fPs","translatePs","f1","Vector"],"mappings":"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","file":"index.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.FloVector2d = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n'use strict';\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;_e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }return _arr;\n  }return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar DELTA = 1e-10;\n\n/** \r\n * Returns the dot (inner) product between two 2-vectors. \r\n * @param {number} a - The first vector\r\n * @param {number} b - The second vector\r\n * @returns {number}\r\n */\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/** \r\n * Returns the cross product signed magnitude between two 2-vectors.\r\n * @param {number[]} a - The first vector\r\n * @param {number[]} b - The second vector\r\n * @returns {number}\r\n */\nfunction cross(a, b) {\n  return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\r\n * Three 2d points are a counter-clockwise turn if ccw > 0, \r\n * clockwise if ccw < 0, and colinear if ccw = 0 because ccw is a \r\n * determinant that gives twice the signed area of the triangle formed \r\n * by p1, p2 and p3.\r\n * @param {number[]} p1 - The first point\r\n * @param {number[]} p2 - The second point\r\n * @param {number[]} p3 - The third point\r\n * @param {number} [delta] - The tolerance at which the three points are \r\n * considered colinear - defaults to 1e-10\r\n * @returns {number}\r\n */\nfunction ccw(p1, p2, p3, delta) {\n  delta = delta === undefined ? DELTA : delta;\n\n  var res = (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0]);\n\n  return Math.abs(res) <= delta ? 0 : res;\n}\n\n/**\r\n * <p>\r\n * Finds the point where two 2d line segments intersect.\r\n * </p>\r\n * <p>\r\n * See <a href=\"http://algs4.cs.princeton.edu/91primitives\">Geometric primitves</a>\r\n * </p> \r\n * @param {number[][]} ab - The first line \r\n * @param {number[][]} cd - The second line\r\n * @param {number} [delta] - The tolerance at which the lines are considered \r\n * parallel - defaults to 1e-10\r\n * @returns {number[]} The point where the two line segments intersect  \r\n * or undefined if they don't intersect or a line if they intersect at \r\n * infinitely many points. \r\n */\nfunction segSegIntersection(ab, cd, delta) {\n  delta = delta === undefined ? DELTA : delta;\n\n  var _ab = _slicedToArray(ab, 2),\n      a = _ab[0],\n      b = _ab[1];\n\n  var _cd = _slicedToArray(cd, 2),\n      c = _cd[0],\n      d = _cd[1];\n\n  var denom = (b[0] - a[0]) * (d[1] - c[1]) - (b[1] - a[1]) * (d[0] - c[0]);\n  var rNumer = (a[1] - c[1]) * (d[0] - c[0]) - (a[0] - c[0]) * (d[1] - c[1]);\n  var sNumer = (a[1] - c[1]) * (b[0] - a[0]) - (a[0] - c[0]) * (b[1] - a[1]);\n\n  if (Math.abs(denom) <= delta) {\n    // parallel\n    if (Math.abs(rNumer) <= delta) {\n      // colinear\n      // TODO Check if x-projections and y-projections intersect\n      // and return the line of intersection if they do.\n      return undefined;\n    }\n    return undefined;\n  }\n\n  var r = rNumer / denom;\n  var s = sNumer / denom;\n\n  if (0 <= r && r <= 1 && 0 <= s && s <= 1) {\n    return [a[0] + r * (b[0] - a[0]), a[1] + r * (b[1] - a[1])];\n  }\n\n  return undefined;\n}\n\n/**\r\n * Returns true if the two given 2d line segments intersect, false otherwise.\r\n * @param {number[][]} a - A line segment\r\n * @param {number[][]} b - Another line segment\r\n * @returns {boolean}\r\n */\nfunction doesSegSegIntersect(a, b) {\n  if (ccw(a[0], a[1], b[0]) * ccw(a[0], a[1], b[1]) > 0) {\n    return false;\n  }\n  if (ccw(b[0], b[1], a[0]) * ccw(b[0], b[1], a[1]) > 0) {\n    return false;\n  }\n\n  return true;\n}\n\n/** \r\n * Returns the squared distance between two 2d points.\r\n * @param {number[]} p1 - A point\r\n * @param {number[]} p2 - Another point\r\n * @returns {number}\r\n */\nfunction squaredDistanceBetween(p1, p2) {\n  var x = p2[0] - p1[0];\n  var y = p2[1] - p1[1];\n\n  return x * x + y * y;\n}\n\n/**\r\n * Returns a scaled version of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @param {number} factor - A scale factor\r\n * @returns {number[]}\r\n */\nfunction scale(p, factor) {\n  return [p[0] * factor, p[1] * factor];\n}\n\n/**\r\n * Returns the given 2-vector reversed.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction reverse(p) {\n  return [-p[0], -p[1]];\n}\n\n/**\r\n * Returns the given 2-vector scaled to a length of one.\r\n * @param {number[]} p\r\n * @returns {number[]}\r\n */\nfunction toUnitVector(p) {\n  var scaleFactor = 1 / length(p);\n\n  return [p[0] * scaleFactor, p[1] * scaleFactor];\n}\n\n/**\r\n * Returns the given 2-vector scaled to the given length.\r\n * @param {number[]} p \r\n * @param {number} length \r\n * @returns {number[]}\r\n */\nfunction toLength(p, len) {\n  var scaleFactor = len / length(p);\n\n  return [p[0] * scaleFactor, p[1] * scaleFactor];\n}\n\n/** \r\n * Returns the second 2-vector minus the first.\r\n * @param {number[]} p1 - The first vector\r\n * @param {number[]} p2 - The second vector\r\n * @returns {number[]}\r\n */\nfunction fromTo(p1, p2) {\n  return [p2[0] - p1[0], p2[1] - p1[1]];\n}\n\n/**\r\n * Performs linear interpolation between two 2d points and returns the resultant point.\r\n * @param {number[]} p1 - The first point.\r\n * @param {number[]} p2 - The second point.\r\n * @param {number} t - The interpolation fraction (usually in [0,1]).  \r\n * @returns {number[]}\r\n */\nfunction interpolate(p1, p2, t) {\n  return [p1[0] + (p2[0] - p1[0]) * t, p1[1] + (p2[1] - p1[1]) * t];\n}\n\n/**\r\n * Returns the mean point value of the provided array of two 2d points. \r\n * @param {number[][]} ps - The two points\r\n * @returns {number[]}\r\n */\nfunction mean(ps) {\n  var p1 = ps[0];\n  var p2 = ps[1];\n\n  return [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n}\n\n/** \r\n * Returns the distance between two 2d points.\r\n * @param {number[]} p1 - A point.\r\n * @param {number[]} p2 - Another point.\r\n * @returns {number}\r\n */\nfunction distanceBetween(p1, p2) {\n  return Math.sqrt(squaredDistanceBetween(p1, p2));\n}\n\n/** \r\n * Returns the length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction length(p) {\n  return Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n}\n\n/**\r\n * Returns the squared length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction lengthSquared(v) {\n  return v[0] * v[0] + v[1] * v[1];\n}\n\n/** \r\n * Returns the Manhattan distance between two 2d points.\r\n * @param {number[]} p1 - A point.\r\n * @param {number[]} p2 - Another point.\r\n * @returns {number}\r\n */\nfunction manhattanDistanceBetween(p1, p2) {\n  return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\n/** \r\n * Returns the Manhattan length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction manhattanLength(p) {\n  return Math.abs(p[0]) + Math.abs(p[1]);\n}\n\n/**\r\n * <p>\r\n * Returns the distance between the given point and line. \r\n * </p>\r\n * <p>\r\n * See <a href=\"https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\">\r\n * this Wikipedia article</a>\r\n * </p>\r\n * @param {number[]} p - A point\r\n * @param {number[][]} l - A line\r\n * @returns {number}\r\n */\nfunction distanceBetweenPointAndLine(p, l) {\n  var _p = _slicedToArray(p, 2),\n      x0 = _p[0],\n      y0 = _p[1];\n\n  var _l = _slicedToArray(l, 2),\n      _l$ = _slicedToArray(_l[0], 2),\n      x1 = _l$[0],\n      y1 = _l$[1],\n      _l$2 = _slicedToArray(_l[1], 2),\n      x2 = _l$2[0],\n      y2 = _l$2[1];\n\n  var y = y2 - y1;\n  var x = x2 - x1;\n\n  var a = y * x0 - x * y0 + x2 * y1 - y2 * x1;\n  var b = Math.sqrt(x * x + y * y);\n\n  return Math.abs(a / b);\n}\n\n/**\r\n * Returns the squared distance between the given point and line segment. \r\n * @param {number[]} p - A point\r\n * @param {number[][]} l - A line\r\n * @returns {number}\r\n */\nfunction squaredDistanceBetweenPointAndLineSegment(p, l) {\n  var v = l[0];\n  var w = l[1];\n\n  var l2 = squaredDistanceBetween(v, w);\n  if (l2 == 0) {\n    return squaredDistanceBetween(p, v);\n  }\n\n  var t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n  t = Math.max(0, Math.min(1, t));\n\n  var d2 = squaredDistanceBetween(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);\n\n  return d2;\n}\n\n/**\r\n * Returns the circumcenter of the given 2d triangle (given as three 2d points).\r\n * @param {number[][]} triangle \r\n * @returns {number[]}\r\n */\nfunction circumCenter(triangle) {\n  // See wikipedia\n  var p1 = triangle[0];\n  var p2 = triangle[1];\n  var p3 = triangle[2];\n\n  var Sx = 0.5 * det3([lengthSquared(p1), p1[1], 1], [lengthSquared(p2), p2[1], 1], [lengthSquared(p3), p3[1], 1]);\n\n  var Sy = 0.5 * det3([p1[0], lengthSquared(p1), 1], [p2[0], lengthSquared(p2), 1], [p3[0], lengthSquared(p3), 1]);\n\n  var a = det3([p1[0], p1[1], 1], [p2[0], p2[1], 1], [p3[0], p3[1], 1]);\n\n  var b = det3([p1[0], p1[1], lengthSquared(p1)], [p2[0], p2[1], lengthSquared(p2)], [p3[0], p3[1], lengthSquared(p3)]);\n\n  return [Sx / a, Sy / a];\n}\n\n/** \r\n * <p>\r\n * Returns the incenter of the given triangle.\r\n * </p>\r\n * <p>\r\n * See Wikipedia - https://en.wikipedia.org/wiki/Incenter \r\n * </p>\r\n * @param {number[][]} triangle \r\n * @returns {number[]}\r\n */\nfunction inCenter(triangle) {\n  var p1 = triangle[0];\n  var p2 = triangle[1];\n  var p3 = triangle[2];\n\n  var l1 = distanceBetween(p2, p3);\n  var l2 = distanceBetween(p1, p3);\n  var l3 = distanceBetween(p1, p2);\n  var lengthSum = l1 + l2 + l3;\n  return [(l1 * p1[0] + l2 * p2[0] + l3 * p3[0]) / lengthSum, (l1 * p1[1] + l2 * p2[1] + l3 * p3[1]) / lengthSum];\n}\n\n/**\r\n * Returns the centroid of the given polygon, e.g. triangle. The polygon\r\n * must be simple, i.e. not self-intersecting.\r\n * @param {number[][]} polygon \r\n * @returns {number[]}\r\n */\nfunction centroid(polygon) {\n  if (polygon.length === 3) {\n    var p1 = polygon[0];\n    var p2 = polygon[1];\n    var p3 = polygon[2];\n\n    var x = p1[0] + p2[0] + p3[0];\n    var y = p1[1] + p2[1] + p3[1];\n\n    return [x / 3, y / 3];\n  }\n\n  // polygon.length assumed > 3 and assumed to be non-self-intersecting\n  // See wikipedia\n\n  // First calculate the area, A, of the polygon\n  var A = 0;\n  for (var i = 0; i < polygon.length; i++) {\n    var p0 = polygon[i];\n    var _p2 = i === polygon.length - 1 ? polygon[0] : polygon[i + 1];\n\n    A = A + (p0[0] * _p2[1] - _p2[0] * p0[1]);\n  }\n  A = A / 2;\n\n  var C = [0, 0];\n  for (var _i = 0; _i < polygon.length; _i++) {\n    var _p3 = polygon[_i];\n    var _p4 = _i === polygon.length - 1 ? polygon[0] : polygon[_i + 1];\n\n    C[0] = C[0] + (_p3[0] + _p4[0]) * (_p3[0] * _p4[1] - _p4[0] * _p3[1]);\n    C[1] = C[1] + (_p3[1] + _p4[1]) * (_p3[0] * _p4[1] - _p4[0] * _p3[1]);\n  }\n\n  return [C[0] / (6 * A), C[1] / (6 * A)];\n}\n\n/**\r\n * Calculate the determinant of three 3-vectors, i.e. 3x3 matrix\r\n * @ignore\r\n * @param {number[]} x \r\n * @param {number[]} y\r\n * @param {number[]} z\r\n * @returns {number}\r\n */\nfunction det3(x, y, z) {\n  return x[0] * (y[1] * z[2] - y[2] * z[1]) - x[1] * (y[0] * z[2] - y[2] * z[0]) + x[2] * (y[0] * z[1] - y[1] * z[0]);\n}\n\n/**\r\n * Returns the result of adding two 2-vectors. This function is curried.\r\n * @param {number[]} a - A vector\r\n * @param {number[]} b - Another vector\r\n * @param {number[]}\r\n */\nfunction translate(a, b) {\n  function f(b) {\n    return [a[0] + b[0], a[1] + b[1]];\n  }\n\n  // Curry the function\n  return b === undefined ? f : f(b);\n}\n\n/**\r\n * Creates a transformation function that operates on multiple points from the \r\n * given arity two function.\r\n * @ignore\r\n */\nfunction createCurriedFunctionArity2(f) {\n  return function (a, ps) {\n    var f1 = f(a); // Cache for speed\n    var fPs = function fPs(ps) {\n      return ps.map(f1);\n    };\n\n    // Curry the function\n    return ps === undefined ? fPs : fPs(ps);\n  };\n}\n\n/**\r\n * Creates a transformation function that operates on multiple points from the \r\n * given curried arity three function.\r\n * @ignore\r\n */\nfunction createCurriedFunctionArity3(f) {\n  return function (a, b, ps) {\n    var f2 = f(a, b); // Cache for speed\n    var fPs = function fPs(ps) {\n      return ps.map(f2);\n    };\n\n    // Curry the function\n    return ps === undefined ? fPs : fPs(ps);\n  };\n}\n\n/**\r\n * Return the given 2d points translated by the given 2d vector. This function\r\n * is curried.\r\n * @param {number} sinθ\r\n * @param {number} cosθ\r\n * @param {number[][]} ps \r\n * @returns {number[][]}\r\n */\nvar rotatePs = createCurriedFunctionArity3(rotate);\n\n/**\r\n * Return the given 2d points translated by the given 2d vector. This function\r\n * is curried.\r\n * @param {number[]} v \r\n * @param {number[][]} ps \r\n * @returns {number[][]}\r\n */\nvar translatePs = createCurriedFunctionArity2(translate);\n\n/**\r\n * Returns a rotated version of the given 2-vector given the sine and cosine of the angle.\r\n * @param {number} sinθ\r\n * @param {number} cosθ\r\n * @param {number[]} p\r\n * @returns {number[]}\r\n */\nfunction rotate(sinθ, cosθ, p) {\n  function rotateByθ(p) {\n    return [p[0] * cosθ - p[1] * sinθ, p[0] * sinθ + p[1] * cosθ];\n  }\n\n  // Curry the function\n  return p === undefined ? rotateByθ : rotateByθ(p);\n}\n\n/**\r\n * Returns true if two 2-vectors are identical, false otherwise.\r\n * @param {number[]} a\r\n * @param {number[]} b\r\n * @returns {boolean}\r\n */\nfunction equal(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\r\n * Returns a anti-clockwise rotated version of the given 2-vector given the sine \r\n * and cosine of the angle.\r\n * @param {number[]} p \r\n * @param {number} sinθ\r\n * @param {number} cosθ\r\n * @returns {number[]}\r\n */\nfunction reverseRotate(sinθ, cosθ, p) {\n  return [+p[0] * cosθ + p[1] * sinθ, -p[0] * sinθ + p[1] * cosθ];\n}\n\n/**\r\n * Returns a 90 degrees rotated version of the given 2-vector.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction rotate90Degrees(p) {\n  return [-p[1], p[0]];\n}\n\n/**\r\n * Returns a negative 90 degrees rotated version of the given 2-vector.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction rotateNeg90Degrees(p) {\n  return [p[1], -p[0]];\n}\n\n/**\r\n * Transforms the given 2-vector by applying the given function to each coordinate.\r\n * @param {number[]} p \r\n * @param {function} f \r\n * @returns {*[]}\r\n */\nfunction transform(p, f) {\n  return [f(p[0]), f(p[1])];\n}\n\n/**\r\n * Returns the closest point to the array of 2d points, optionally providing a distance function.\r\n * @param {number[]} p\r\n * @param {number[][]} ps\r\n * @param {function} f - Distance function - if undefined uses squaredDistanceBetween\r\n */\nfunction getClosestTo(p, ps, f) {\n  f = f === undefined ? squaredDistanceBetween : f;\n\n  var cp = undefined; // Closest Point\n  var bestd = Number.POSITIVE_INFINITY;\n  for (var i = 0; i < ps.length; i++) {\n    var p_ = ps[i];\n\n    var d = f(p, p_);\n    if (d < bestd) {\n      cp = p_;\n      bestd = d;\n    }\n  }\n\n  return cp;\n}\n\n/** \r\n * Returns an array of points by applying a translation and then rotation to the given points.\r\n * @param {number[]} v - The translation vector\r\n * @param {number} sinθ \r\n * @param {number} cosθ\r\n * @param {number[][]} ps - The input points\r\n * @returns {number[][]}\r\n **/\nfunction translateThenRotatePs(v, sinθ, cosθ, ps) {\n  return ps.map(function (p) {\n    return rotate(sinθ, cosθ, translate(v, p));\n  });\n}\n\n/** \r\n * Returns an array of points by applying a rotation and then translation to the given points.\r\n * @param {number} sinθ \r\n * @param {number} cosθ\r\n * @param {number[]} v - The translation vector\r\n * @param {number[][]} ps - The input points\r\n * @returns {number[][]}\r\n **/\nfunction rotateThenTranslatePs(sinθ, cosθ, v, ps) {\n  return ps.map(function (p) {\n    return translate(v, rotate(sinθ, cosθ, p));\n  });\n}\n\n/*\r\n * Purely functional 2d vector utilities.\r\n */\nvar Vector = {\n  dot: dot,\n  cross: cross,\n  ccw: ccw,\n  segSegIntersection: segSegIntersection,\n  doesSegSegIntersect: doesSegSegIntersect,\n  squaredDistanceBetween: squaredDistanceBetween,\n  scale: scale,\n  reverse: reverse,\n  translate: translate,\n  toUnitVector: toUnitVector,\n  toLength: toLength,\n  fromTo: fromTo,\n  interpolate: interpolate,\n  mean: mean,\n  distanceBetween: distanceBetween,\n  length: length,\n  lengthSquared: lengthSquared,\n  manhattanDistanceBetween: manhattanDistanceBetween,\n  manhattanLength: manhattanLength,\n  distanceBetweenPointAndLine: distanceBetweenPointAndLine,\n  squaredDistanceBetweenPointAndLineSegment: squaredDistanceBetweenPointAndLineSegment,\n  circumCenter: circumCenter,\n  inCenter: inCenter,\n  centroid: centroid,\n  equal: equal,\n  rotate: rotate,\n  rotatePs: rotatePs,\n  reverseRotate: reverseRotate,\n  rotate90Degrees: rotate90Degrees,\n  rotateNeg90Degrees: rotateNeg90Degrees,\n  transform: transform,\n  getClosestTo: getClosestTo,\n  translatePs: translatePs,\n  translateThenRotatePs: translateThenRotatePs,\n  rotateThenTranslatePs: rotateThenTranslatePs\n};\n\nmodule.exports = Vector;\n\n},{}]},{},[1])(1)\n});"]}