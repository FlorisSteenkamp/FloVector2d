{"version":3,"sources":["flo-vector2d.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","FloVector2d","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","dot","b","cross","ccw","p1","p2","p3","delta","undefined","DELTA","res","Math","abs","segSegIntersection","ab","cd","_ab","_slicedToArray","_cd","c","d","denom","rNumer","sNumer","doesSegSegIntersect","squaredDistanceBetween","x","y","scale","p","factor","reverse","toUnitVector","scaleFactor","toLength","fromTo","interpolate","mean","ps","distanceBetween","sqrt","lengthSquared","v","manhattanDistanceBetween","manhattanLength","distanceBetweenPointAndLine","_p","x0","y0","_l","_l$","x1","y1","_l$2","x2","y2","squaredDistanceBetweenPointAndLineSegment","w","l2","max","min","circumCenter","triangle","Sx","det3","squaredNorm","Sy","inCenter","l1","l3","lengthSum","centroid","polygon","A","p0","_p2","C","_i","_p3","_p4","z","translate","rotate","sinθ","cosθ","equal","reverseRotate","rotate90Degrees","rotateNeg90Degrees","transform","getClosestTo","cp","bestd","Number","POSITIVE_INFINITY","p_","translateThenRotatePoints","map","rotateThenTranslatePoints","sliceIterator","arr","_arr","_n","_d","_e","_s","Symbol","iterator","next","done","push","value","err","Array","isArray","Object","TypeError","rotatePs","f2","fPs","translatePs","f1","Vector"],"mappings":"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","file":"flo-vector2d.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.FloVector2d = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar DELTA = 1e-10;\n\n/** \r\n * Returns the dot (inner) product between two 2-vectors. \r\n * @param {number} a - The first vector\r\n * @param {number} b - The second vector\r\n * @returns {number}\r\n */\nfunction dot(a, b) {\n\treturn a[0] * b[0] + a[1] * b[1];\n}\n\n/** \r\n * Returns the cross product signed magnitude between two 2-vectors.\r\n * @param {number[]} a - The first vector\r\n * @param {number[]} b - The second vector\r\n * @returns {number}\r\n */\nfunction cross(a, b) {\n\treturn a[0] * b[1] - a[1] * b[0];\n}\n\n/**\r\n * Three 2d points are a counter-clockwise turn if ccw > 0, \r\n * clockwise if ccw < 0, and colinear if ccw = 0 because ccw is a \r\n * determinant that gives twice the signed area of the triangle formed \r\n * by p1, p2 and p3.\r\n * @param {number[]} p1 - The first point\r\n * @param {number[]} p2 - The second point\r\n * @param {number[]} p3 - The third point\r\n * @param {number} [delta] - The tolerance at which the three points are \r\n * considered colinear - defaults to 1e-10\r\n * @returns {number}\r\n */\nfunction ccw(p1, p2, p3, delta) {\n\tdelta = delta === undefined ? DELTA : delta;\n\n\tvar res = (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0]);\n\n\treturn Math.abs(res) <= delta ? 0 : res;\n}\n\n/**\r\n * <p>\r\n * Finds the point where two 2d line segments intersect.\r\n * </p>\r\n * <p>\r\n * See <a href=\"http://algs4.cs.princeton.edu/91primitives\">Geometric primitves</a>\r\n * </p> \r\n * @param {number[][]} ab - The first line \r\n * @param {number[][]} cd - The second line\r\n * @param {number} [delta] - The tolerance at which the lines are considered \r\n * parallel - defaults to 1e-10\r\n * @returns {number[]} The point where the two line segments intersect  \r\n * or undefined if they don't intersect or a line if they intersect at \r\n * infinitely many points. \r\n */\nfunction segSegIntersection(ab, cd, delta) {\n\tdelta = delta === undefined ? DELTA : delta;\n\n\tvar _ab = _slicedToArray(ab, 2),\n\t    a = _ab[0],\n\t    b = _ab[1];\n\n\tvar _cd = _slicedToArray(cd, 2),\n\t    c = _cd[0],\n\t    d = _cd[1];\n\n\tvar denom = (b[0] - a[0]) * (d[1] - c[1]) - (b[1] - a[1]) * (d[0] - c[0]);\n\tvar rNumer = (a[1] - c[1]) * (d[0] - c[0]) - (a[0] - c[0]) * (d[1] - c[1]);\n\tvar sNumer = (a[1] - c[1]) * (b[0] - a[0]) - (a[0] - c[0]) * (b[1] - a[1]);\n\n\tif (Math.abs(denom) <= delta) {\n\t\t// parallel\n\t\tif (Math.abs(rNumer) <= delta) {\n\t\t\t// colinear\n\t\t\t// TODO Check if x-projections and y-projections intersect\n\t\t\t// and return the line of intersection if they do.\n\t\t\treturn undefined;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tvar r = rNumer / denom;\n\tvar s = sNumer / denom;\n\n\tif (0 <= r && r <= 1 && 0 <= s && s <= 1) {\n\t\treturn [a[0] + r * (b[0] - a[0]), a[1] + r * (b[1] - a[1])];\n\t}\n\n\treturn undefined;\n}\n\n/**\r\n * Returns true if the two given 2d line segments intersect, false otherwise.\r\n * @param {number[][]} a - A line segment\r\n * @param {number[][]} b - Another line segment\r\n * @returns {boolean}\r\n */\nfunction doesSegSegIntersect(a, b) {\n\tif (ccw(a[0], a[1], b[0]) * ccw(a[0], a[1], b[1]) > 0) {\n\t\treturn false;\n\t}\n\tif (ccw(b[0], b[1], a[0]) * ccw(b[0], b[1], a[1]) > 0) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/** \r\n * Returns the squared distance between two 2d points.\r\n * @param {number[]} p1 - A point\r\n * @param {number[]} p2 - Another point\r\n * @returns {number}\r\n */\nfunction squaredDistanceBetween(p1, p2) {\n\tvar x = p2[0] - p1[0];\n\tvar y = p2[1] - p1[1];\n\n\treturn x * x + y * y;\n}\n\n/**\r\n * Returns a scaled version of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @param {number} factor - A scale factor\r\n * @returns {number[]}\r\n */\nfunction scale(p, factor) {\n\treturn [p[0] * factor, p[1] * factor];\n}\n\n/**\r\n * Returns the given 2-vector reversed.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction reverse(p) {\n\treturn [-p[0], -p[1]];\n}\n\n/**\r\n * Returns the given 2-vector scaled to a length of one.\r\n * @param {number[]} p\r\n * @returns {number[]}\r\n */\nfunction toUnitVector(p) {\n\tvar scaleFactor = 1 / length(p);\n\n\treturn [p[0] * scaleFactor, p[1] * scaleFactor];\n}\n\n/**\r\n * Returns the given 2-vector scaled to the given length.\r\n * @param {number[]} p \r\n * @param {number} length \r\n * @returns {number[]}\r\n */\nfunction toLength(p, length) {\n\tvar scaleFactor = length / length(p);\n\n\treturn [p[0] * scaleFactor, p[1] * scaleFactor];\n}\n\n/** \r\n * Returns the second 2-vector minus the first.\r\n * @param {number[]} p1 - The first vector\r\n * @param {number[]} p2 - The second vector\r\n * @returns {number[]}\r\n */\nfunction fromTo(p1, p2) {\n\treturn [p2[0] - p1[0], p2[1] - p1[1]];\n}\n\n/**\r\n * Performs linear interpolation between two 2d points and returns the resultant point.\r\n * @param {number[]} p1 - The first point.\r\n * @param {number[]} p2 - The second point.\r\n * @param {number} t - The interpolation fraction (usually in [0,1]).  \r\n * @returns {number[]}\r\n */\nfunction interpolate(p1, p2, t) {\n\treturn [p1[0] + (p2[0] - p1[0]) * t, p1[1] + (p2[1] - p1[1]) * t];\n}\n\n/**\r\n * Returns the mean point value of the provided array of two 2d points. \r\n * @param {number[][]} ps - The two points\r\n * @returns {number[]}\r\n */\nfunction mean(ps) {\n\tvar p1 = ps[0];\n\tvar p2 = ps[1];\n\n\treturn [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n}\n\n/** \r\n * Returns the distance between two 2d points.\r\n * @param {number[]} p1 - A point.\r\n * @param {number[]} p2 - Another point.\r\n * @returns {number}\r\n */\nfunction distanceBetween(p1, p2) {\n\treturn Math.sqrt(squaredDistanceBetween(p1, p2));\n}\n\n/** \r\n * Returns the length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction length(p) {\n\treturn Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n}\n\n/**\r\n * Returns the squared length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction lengthSquared(v) {\n\treturn v[0] * v[0] + v[1] * v[1];\n}\n\n/** \r\n * Returns the Manhattan distance between two 2d points.\r\n * @param {number[]} p1 - A point.\r\n * @param {number[]} p2 - Another point.\r\n * @returns {number}\r\n */\nfunction manhattanDistanceBetween(p1, p2) {\n\treturn Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\n/** \r\n * Returns the Manhattan length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction manhattanLength(p) {\n\treturn Math.abs(p[0]) + Math.abs(p[1]);\n}\n\n/**\r\n * <p>\r\n * Returns the distance between the given point and line. \r\n * </p>\r\n * <p>\r\n * See <a href=\"https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\">\r\n * this Wikipedia article</a>\r\n * </p>\r\n * @param {number[]} p - A point\r\n * @param {number[][]} l - A line\r\n * @returns {number}\r\n */\nfunction distanceBetweenPointAndLine(p, l) {\n\tvar _p = _slicedToArray(p, 2),\n\t    x0 = _p[0],\n\t    y0 = _p[1];\n\n\tvar _l = _slicedToArray(l, 2),\n\t    _l$ = _slicedToArray(_l[0], 2),\n\t    x1 = _l$[0],\n\t    y1 = _l$[1],\n\t    _l$2 = _slicedToArray(_l[1], 2),\n\t    x2 = _l$2[0],\n\t    y2 = _l$2[1];\n\n\tvar y = y2 - y1;\n\tvar x = x2 - x1;\n\n\tvar a = y * x0 - x * y0 + x2 * y1 - y2 * x1;\n\tvar b = Math.sqrt(x * x + y * y);\n\n\treturn Math.abs(a / b);\n}\n\n/**\r\n * Returns the squared distance between the given point and line segment. \r\n * @param {number[]} p - A point\r\n * @param {number[][]} l - A line\r\n * @returns {number}\r\n */\nfunction squaredDistanceBetweenPointAndLineSegment(p, l) {\n\tvar v = l[0];\n\tvar w = l[1];\n\n\tvar l2 = squaredDistanceBetween(v, w);\n\tif (l2 == 0) {\n\t\treturn squaredDistanceBetween(p, v);\n\t}\n\n\tvar t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n\tt = Math.max(0, Math.min(1, t));\n\n\tvar d2 = squaredDistanceBetween(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);\n\n\treturn d2;\n}\n\n/**\r\n * Returns the circumcenter of the given 2d triangle (given as three 2d points).\r\n * @param {number[][]} triangle \r\n * @returns {number[]}\r\n */\nfunction circumCenter(triangle) {\n\t// See wikipedia\n\tvar p1 = triangle[0];\n\tvar p2 = triangle[1];\n\tvar p3 = triangle[2];\n\n\tvar Sx = 0.5 * det3([squaredNorm(p1), p1[1], 1], [squaredNorm(p2), p2[1], 1], [squaredNorm(p3), p3[1], 1]);\n\n\tvar Sy = 0.5 * det3([p1[0], squaredNorm(p1), 1], [p2[0], squaredNorm(p2), 1], [p3[0], squaredNorm(p3), 1]);\n\n\tvar a = det3([p1[0], p1[1], 1], [p2[0], p2[1], 1], [p3[0], p3[1], 1]);\n\n\tvar b = det3([p1[0], p1[1], squaredNorm(p1)], [p2[0], p2[1], squaredNorm(p2)], [p3[0], p3[1], squaredNorm(p3)]);\n\n\treturn [Sx / a, Sy / a];\n}\n\n/** \r\n * <p>\r\n * Returns the incenter of the given triangle.\r\n * </p>\r\n * <p>\r\n * See Wikipedia - https://en.wikipedia.org/wiki/Incenter \r\n * </p>\r\n * @param {number[][]} triangle \r\n * @returns {number[]}\r\n */\nfunction inCenter(triangle) {\n\tvar p1 = triangle[0];\n\tvar p2 = triangle[1];\n\tvar p3 = triangle[2];\n\n\tvar l1 = distanceBetween(p2, p3);\n\tvar l2 = distanceBetween(p1, p3);\n\tvar l3 = distanceBetween(p1, p2);\n\tvar lengthSum = l1 + l2 + l3;\n\treturn [(l1 * p1[0] + l2 * p2[0] + l3 * p3[0]) / lengthSum, (l1 * p1[1] + l2 * p2[1] + l3 * p3[1]) / lengthSum];\n}\n\n/**\r\n * Returns the centroid of the given polygon, e.g. triangle. The polygon\r\n * must be simple, i.e. not self-intersecting.\r\n * @param {number[][]} polygon \r\n * @returns {number[]}\r\n */\nfunction centroid(polygon) {\n\tif (polygon.length === 3) {\n\t\tvar p1 = polygon[0];\n\t\tvar p2 = polygon[1];\n\t\tvar p3 = polygon[2];\n\n\t\tvar x = p1[0] + p2[0] + p3[0];\n\t\tvar y = p1[1] + p2[1] + p3[1];\n\n\t\treturn [x / 3, y / 3];\n\t}\n\n\t// polygon.length assumed > 3 and assumed to be non-self-intersecting\n\t// See wikipedia\n\n\t// First calculate the area, A, of the polygon\n\tvar A = 0;\n\tfor (var i = 0; i < polygon.length; i++) {\n\t\tvar p0 = polygon[i];\n\t\tvar _p2 = i === polygon.length - 1 ? polygon[0] : polygon[i + 1];\n\n\t\tA = A + (p0[0] * _p2[1] - _p2[0] * p0[1]);\n\t}\n\tA = A / 2;\n\n\tvar C = [0, 0];\n\tfor (var _i = 0; _i < polygon.length; _i++) {\n\t\tvar _p3 = polygon[_i];\n\t\tvar _p4 = _i === polygon.length - 1 ? polygon[0] : polygon[_i + 1];\n\n\t\tC[0] = C[0] + (_p3[0] + _p4[0]) * (_p3[0] * _p4[1] - _p4[0] * _p3[1]);\n\t\tC[1] = C[1] + (_p3[1] + _p4[1]) * (_p3[0] * _p4[1] - _p4[0] * _p3[1]);\n\t}\n\n\treturn [C[0] / (6 * A), C[1] / (6 * A)];\n}\n\n/**\r\n * Calculate the determinant of three 3-vectors, i.e. 3x3 matrix\r\n * @ignore\r\n * @param {number[]} x \r\n * @param {number[]} y\r\n * @param {number[]} z\r\n * @returns {number}\r\n */\nfunction det3(x, y, z) {\n\treturn x[0] * (y[1] * z[2] - y[2] * z[1]) - x[1] * (y[0] * z[2] - y[2] * z[0]) + x[2] * (y[0] * z[1] - y[1] * z[0]);\n}\n\n/**\r\n * Returns the result of adding two 2-vectors. This function is curried.\r\n * @param {number[]} a - A vector\r\n * @param {number[]} b - Another vector\r\n * @param {number[]}\r\n */\nfunction translate(a, b) {\n\tfunction f(b) {\n\t\treturn [a[0] + b[0], a[1] + b[1]];\n\t}\n\n\t// Curry the function\n\treturn b === undefined ? f : f(b);\n}\n\n/**\r\n * Creates a transformation function that operates on multiple points from the \r\n * given arity two function.\r\n * @ignore\r\n */\nfunction createCurriedFunctionArity2(f) {\n\treturn function (a, ps) {\n\t\tvar f1 = f(a); // Cache for speed\n\t\tvar fPs = function fPs(ps) {\n\t\t\treturn ps.map(f1);\n\t\t};\n\n\t\t// Curry the function\n\t\treturn ps === undefined ? fPs : fPs(ps);\n\t};\n}\n\n/**\r\n * Creates a transformation function that operates on multiple points from the \r\n * given curried arity three function.\r\n * @ignore\r\n */\nfunction createCurriedFunctionArity3(f) {\n\treturn function (a, b, ps) {\n\t\tvar f2 = f(a, b); // Cache for speed\n\t\tvar fPs = function fPs(ps) {\n\t\t\treturn ps.map(f2);\n\t\t};\n\n\t\t// Curry the function\n\t\treturn ps === undefined ? fPs : fPs(ps);\n\t};\n}\n\n/**\r\n * Return the given 2d points translated by the given 2d vector. This function\r\n * is curried.\r\n * @param {number[][]} ps \r\n * @param {number} sinθ\r\n * @param {number} cosθ\r\n * @returns {number[][]}\r\n */\nvar rotatePs = createCurriedFunctionArity3(rotate);\n\n/**\r\n * Return the given 2d points translated by the given 2d vector. This function\r\n * is curried.\r\n * @param {number[][]} ps \r\n * @param {number[]} v \r\n * @returns {number[][]}\r\n */\nvar translatePs = createCurriedFunctionArity2(translate);\n\n/**\r\n * Returns a rotated version of the given 2-vector given the sine and cosine of the angle.\r\n * @param {number[]} p \r\n * @param {number} sinθ\r\n * @param {number} cosθ\r\n * @returns {number[]}\r\n */\nfunction rotate(sinθ, cosθ, p) {\n\tfunction rotateByθ(p) {\n\t\treturn [p[0] * cosθ - p[1] * sinθ, p[0] * sinθ + p[1] * cosθ];\n\t}\n\n\t// Curry the function\n\treturn p === undefined ? rotate : rotateByθ(p);\n}\n\n/**\r\n * Returns true if two 2-vectors are identical, false otherwise.\r\n * @param {number[]} a\r\n * @param {number[]} b\r\n * @returns {boolean}\r\n */\nfunction equal(a, b) {\n\treturn a[0] === b[0] && a[1] === b[1];\n}\n\n/**\r\n * Returns a anti-clockwise rotated version of the given 2-vector given the sine and cosine of the angle.\r\n * @param {number[]} p \r\n * @param {number} sinθ\r\n * @param {number} cosθ\r\n * @returns {number[]}\r\n */\nfunction reverseRotate(p, sinθ, cosθ) {\n\treturn [+p[0] * cosθ + p[1] * sinθ, -p[0] * sinθ + p[1] * cosθ];\n}\n\n/**\r\n * Returns a 90 degrees rotated version of the given 2-vector.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction rotate90Degrees(p) {\n\treturn [-p[1], p[0]];\n}\n\n/**\r\n * Returns a negative 90 degrees rotated version of the given 2-vector.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction rotateNeg90Degrees(p) {\n\treturn [p[1], -p[0]];\n}\n\n/**\r\n * Transforms the given 2-vector by applying the given function to each coordinate.\r\n * @param {number[]} p \r\n * @param {function} f \r\n * @returns {*[]}\r\n */\nfunction transform(p, f) {\n\treturn [f(p[0]), f(p[1])];\n}\n\n/**\r\n * Returns the closest point to the array of 2d points, optionally providing a distance function.\r\n * @param {number[]} p\r\n * @param {number[][]} ps\r\n * @param {function} f - Distance function - if undefined uses squaredDistanceBetween\r\n */\nfunction getClosestTo(p, ps, f) {\n\tf = f === undefined ? squaredDistanceBetween : f;\n\n\tvar cp = undefined; // Closest Point\n\tvar bestd = Number.POSITIVE_INFINITY;\n\tfor (var i = 0; i < ps.length; i++) {\n\t\tvar p_ = ps[i];\n\n\t\tvar d = f(p, p_);\n\t\tif (d < bestd) {\n\t\t\tcp = p_;\n\t\t\tbestd = d;\n\t\t}\n\t}\n\n\treturn cp;\n}\n\n/** \r\n * Returns an array of points by applying a translation and then rotation to the given points.\r\n * @param {number[][]} ps - The input points\r\n * @param {number[]} t - The translation vector\r\n * @param {number} sinθ \r\n * @param {number} cosθ\r\n * @returns {number[][]}\r\n **/\nfunction translateThenRotatePoints(ps, v, sinθ, cosθ) {\n\treturn ps.map(function (p) {\n\t\treturn rotate(translate(p, v), sinθ, cosθ);\n\t});\n}\n\n/** \r\n * Returns an array of points by applying a rotation and then translation to the given points.\r\n * @param {number[][]} ps - The input points\r\n * @param {number[]} t - The translation vector\r\n * @param {number} sinθ \r\n * @param {number} cosθ\r\n * @returns {number[][]}\r\n **/\nfunction rotateThenTranslatePoints(ps, v, sinθ, cosθ) {\n\treturn ps.map(function (p) {\n\t\treturn translate(rotate(p, sinθ, cosθ), v);\n\t});\n}\n\n/*\r\n * Purely functional 2d vector utilities.\r\n */\nvar Vector = {\n\tdot: dot,\n\tcross: cross,\n\tccw: ccw,\n\tsegSegIntersection: segSegIntersection,\n\tdoesSegSegIntersect: doesSegSegIntersect,\n\tsquaredDistanceBetween: squaredDistanceBetween,\n\tscale: scale,\n\treverse: reverse,\n\ttranslate: translate,\n\ttoUnitVector: toUnitVector,\n\ttoLength: toLength,\n\tfromTo: fromTo,\n\tinterpolate: interpolate,\n\tmean: mean,\n\tdistanceBetween: distanceBetween,\n\tlength: length,\n\tlengthSquared: lengthSquared,\n\tmanhattanDistanceBetween: manhattanDistanceBetween,\n\tmanhattanLength: manhattanLength,\n\tdistanceBetweenPointAndLine: distanceBetweenPointAndLine,\n\tsquaredDistanceBetweenPointAndLineSegment: squaredDistanceBetweenPointAndLineSegment,\n\tcircumCenter: circumCenter,\n\tinCenter: inCenter,\n\tcentroid: centroid,\n\tequal: equal,\n\trotate: rotate,\n\trotatePs: rotatePs,\n\treverseRotate: reverseRotate,\n\trotate90Degrees: rotate90Degrees,\n\trotateNeg90Degrees: rotateNeg90Degrees,\n\ttransform: transform,\n\tgetClosestTo: getClosestTo,\n\ttranslatePs: translatePs,\n\ttranslateThenRotatePoints: translateThenRotatePoints,\n\trotateThenTranslatePoints: rotateThenTranslatePoints\n};\n\nmodule.exports = Vector;\n\n},{}]},{},[1])(1)\n});"]}